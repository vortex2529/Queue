#include <iostream>
#include <queue>
using namespace std;




void reverseQueue(queue<int> & q){
  if(q.empty()) return;

  int ele = q.front();
  q.pop();
  reverseQueue(q);
  q.push(ele);

}

void solve(queue<int>&q,int k,int i,int n){

    if(i == n-k){
      return;
    }
    int ele = q.front();
    q.pop();
    solve(q,k,i+1,n);
    q.push(ele);
}
void reverseFirstKelements(queue<int>&q,int k){
  if(q.empty()) return;

  if(k<=0 || k > q.size()) return;
  reverseQueue(q);

  int i=0;
  solve(q,k,i,q.size());
  
}


void reverseK(queue<int> &q,int k){
  if(q.empty()) return;

  int n = q.size();

  if(k <= 0 || k > n) return;

  // step 1:
  stack<int> s;
  int count = 0;
  while(!q.empty()){
    s.push(q.front());
    q.pop();
    count++;

    if(count == k) break;
  }

  // step 2:
  while(!s.empty()){
    q.push(s.top());
    s.pop();
  }

  // step 3:
  count = 0;
  while(!q.empty() && n-k != 0){
    q.push(q.front());
    q.pop();
    count++;

    if(count == n-k) break;
  }
}

int main() {
  queue<int> q;

  q.push(5);
  q.push(15);
  q.push(25);
  q.push(35);
  q.push(45);
  q.push(55);

  // method 1
  reverseFirstKelements(q,6);
  // method 2
  reverseK(q,3);
  while(!q.empty()){
    cout<<q.front()<<" ";
    q.pop();
  }
  return 0;
}
